C51 COMPILER V9.60.7.0   PROJETO_ATUALIZADO                                                05/26/2025 16:38:08 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE PROJETO_ATUALIZADO
OBJECT MODULE PLACED IN .\Objects\projeto atualizado.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE projeto atualizado.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.
                    -\Listings\projeto atualizado.lst) TABS(2) OBJECT(.\Objects\projeto atualizado.obj)

line level    source

   1          #include <reg51.h>
   2          
   3          /* ===================== HARDWARE PIN DEFINITIONS ===================== */
   4          sbit STATUS_LED_GREEN_PIN     = P1^0;  // Green Status LED (Active Low: 0=ON)
   5          sbit STATUS_LED_RED_PIN       = P1^1;  // Red Status LED (Active Low)
   6          sbit STATUS_LED_YELLOW_PIN    = P1^2;  // Yellow Status LED (Active Low)
   7          sbit SERVO_CTRL_PIN           = P1^3;  // Servo motor control output
   8          sbit VEHICLE_DETECT_SENSOR_PIN = P1^4; // Optical sensor (1=No vehicle, 0=Vehicle present)
   9          
  10          /* ===================== SYSTEM PARAMETERS ===================== */
  11          #define MAX_PARKING_CAPACITY            8
  12          #define GATE_AUTO_CLOSE_DELAY_SEC       10
  13          
  14          /* ===================== TIMER SETTINGS ===================== */
  15          // Timer0 - General purpose timing (e.g., yellow LED blink, gate open duration)
  16          // Using a 12MHz crystal
  17          #define GATE_OPEN_MIN_DURATION_TICKS    (GATE_AUTO_CLOSE_DELAY_SEC * CLOCK_TICKS_PER_SECOND)
  18          #define YELLOW_LED_TOGGLE_TICKS         CLOCK_TICKS_PER_SECOND  // Blink every 1 second
  19          #define T0_RELOAD_HIGH_BYTE             0x3C  // For a 50ms interrupt interval
  20          #define T0_RELOAD_LOW_BYTE              0xB0
  21          #define CLOCK_TICKS_PER_SECOND          20    // Based on 50ms Timer0 interval
  22          
  23          // Timer1 - Servo Motor PWM Generation (target 20ms period)
  24          #define SERVO_PWM_PERIOD_US             20000
  25          #define SERVO_PULSE_MIN_US              1000  // Gate closed position (~1ms)
  26          #define SERVO_PULSE_MAX_US              2000  // Gate open position (~2ms)
  27          
  28          // Macro to calculate timer reload value from microseconds
  29          #define CALCULATE_TIMER_RELOAD_US(microseconds)  (65536 - (microseconds))
  30          
  31          /* ===================== GLOBAL STATE FLAGS & COUNTERS ===================== */
  32          volatile unsigned char g_availableParkingSlots = MAX_PARKING_CAPACITY;
  33          volatile bit g_isGateSequenceActive = 0;     // Flag indicating gate operation is in progress
  34          volatile unsigned int g_gateOpenTimerTicks = 0;
  35          volatile unsigned int g_yellowLedBlinkTimerTicks = 0;
  36          volatile bit g_yellowLedState = 1;          // Tracks yellow LED pin state (1=OFF, 0=ON due to active low)
  37          
  38          // Servo control related globals
  39          volatile bit g_servoPwmRunning = 0;
  40          volatile unsigned int g_currentServoPulseUs = SERVO_PULSE_MIN_US;
  41          volatile bit g_isServoSignalHigh = 0;
  42          
  43          /* ===================== FUNCTION DECLARATIONS ===================== */
  44          void system_init(void);
  45          void setupTimer1ForServo(void);
  46          void displaySlotCountOnSevenSegment(unsigned char count);
  47          void readParkingBaySensors(void);
  48          void updateParkingStatusIndicators(void);
  49          
  50          /* ===================== INITIALIZATION ROUTINES ===================== */
  51          void system_init(void) {
  52   1          // Initialize Ports
  53   1          P0 = 0xFF; // Port 0 as input for parking bay sensors
  54   1          P1 = 0xFF; // Initialize P1: LEDs OFF (active low), Servo LOW, Vehicle Sensor as input
C51 COMPILER V9.60.7.0   PROJETO_ATUALIZADO                                                05/26/2025 16:38:08 PAGE 2   

  55   1                     // Specifically:
  56   1          STATUS_LED_GREEN_PIN  = 1; // Off
  57   1          STATUS_LED_RED_PIN    = 1; // Off
  58   1          STATUS_LED_YELLOW_PIN = 1; // Off
  59   1          SERVO_CTRL_PIN        = 0; // Servo signal initially low
  60   1          VEHICLE_DETECT_SENSOR_PIN = 1; // Set as input
  61   1      
  62   1          P2 = 0x00; // Initialize 7-segment display (e.g., show 0 or initial count)
  63   1      
  64   1          // Timer 0 Configuration (Mode 1, 16-bit timer)
  65   1          TMOD = (TMOD & 0xF0) | 0x01; // Set Timer 0 to Mode 1, leave Timer 1 settings
  66   1          TH0 = T0_RELOAD_HIGH_BYTE;
  67   1          TL0 = T0_RELOAD_LOW_BYTE;
  68   1          ET0 = 1; // Enable Timer 0 interrupt
  69   1          TR0 = 0; // Timer 0 initially stopped, started by gate operations
  70   1      
  71   1          // External Interrupts Configuration
  72   1          IT0 = 1; // External interrupt 0 (Entry) on falling edge
  73   1          IT1 = 1; // External interrupt 1 (Exit) on falling edge
  74   1          EX0 = 1; // Enable External interrupt 0
  75   1          EX1 = 1; // Enable External interrupt 1
  76   1      
  77   1          // Global interrupt enable is done in main after all init
  78   1      }
  79          
  80          void setupTimer1ForServo(void) {
  81   1          // Timer 1 Configuration (Mode 1, 16-bit timer for Servo PWM)
  82   1          TMOD = (TMOD & 0x0F) | 0x10; // Set Timer 1 to Mode 1, leave Timer 0 settings
  83   1          
  84   1          g_isServoSignalHigh = 0;
  85   1          SERVO_CTRL_PIN = 0;
  86   1          g_servoPwmRunning = 1;  // Enable PWM by default
  87   1      
  88   1          // Pre-load Timer1 for the low part of the initial PWM cycle (gate closed)
  89   1          TH1 = (unsigned char)(CALCULATE_TIMER_RELOAD_US(SERVO_PWM_PERIOD_US - g_currentServoPulseUs) >> 8);
  90   1          TL1 = (unsigned char)(CALCULATE_TIMER_RELOAD_US(SERVO_PWM_PERIOD_US - g_currentServoPulseUs) & 0xFF);
  91   1          
  92   1          ET1 = 1; // Enable Timer 1 interrupt
  93   1          TR1 = 1; // Start Timer 1
  94   1      }
  95          
  96          /* ===================== DISPLAY MANAGEMENT ===================== */
  97          void displaySlotCountOnSevenSegment(unsigned char countToShow) {
  98   1          if (countToShow > MAX_PARKING_CAPACITY) {
  99   2              countToShow = MAX_PARKING_CAPACITY; // Cap at max
 100   2          }
 101   1          // Assuming P2 directly drives a 7-segment display or a BCD to 7-seg decoder
 102   1          // If direct drive, this should be a lookup table.
 103   1          // For simplicity, directly outputting the number if a decoder is assumed.
 104   1          P2 = countToShow;
 105   1      }
 106          
 107          /* ===================== SENSOR HANDLING ===================== */
 108          void readParkingBaySensors(void) {
 109   1          unsigned char sensorIndex;
 110   1          unsigned char activeSensorMask = 0x01;
 111   1          unsigned char freeSlotsFound = 0;
 112   1          unsigned char p0_data = P0; // Read Port0 once to avoid inconsistencies
 113   1      
 114   1          for (sensorIndex = 0; sensorIndex < MAX_PARKING_CAPACITY; sensorIndex++) {
 115   2              // Assuming 1 on sensor input means slot is free, 0 means occupied.
 116   2              // P0^0 to P0^7 are used for the 8 slots.
C51 COMPILER V9.60.7.0   PROJETO_ATUALIZADO                                                05/26/2025 16:38:08 PAGE 3   

 117   2              if (p0_data & activeSensorMask) {
 118   3                  freeSlotsFound++;
 119   3              }
 120   2              activeSensorMask <<= 1; // Move to next sensor bit
 121   2          }
 122   1          
 123   1          g_availableParkingSlots = freeSlotsFound;
 124   1      }
 125          
 126          void updateParkingStatusIndicators(void) {
 127   1          if (g_availableParkingSlots == 0) {
 128   2              // Parking full
 129   2              STATUS_LED_RED_PIN = 0;   // Red ON
 130   2              STATUS_LED_GREEN_PIN = 1; // Green OFF
 131   2          } else {
 132   2              // Spaces available
 133   2              STATUS_LED_RED_PIN = 1;   // Red OFF
 134   2              STATUS_LED_GREEN_PIN = 0; // Green ON
 135   2          }
 136   1      }
 137          
 138          /* ===================== INTERRUPT SERVICE ROUTINES (ISRs) ===================== */
 139          
 140          // Entry Gate Request (INT0)
 141          void entryGateISR(void) interrupt 0 {
 142   1          if (!g_isGateSequenceActive && g_availableParkingSlots > 0) {
 143   2              g_isGateSequenceActive = 1;
 144   2              
 145   2              g_currentServoPulseUs = SERVO_PULSE_MAX_US; // Target open position
 146   2              g_servoPwmRunning = 1;
 147   2              
 148   2              // Safely reconfigure Timer1 for new pulse width if not about to overflow
 149   2              if (!TF1) { 
 150   3                  TR1 = 0; // Stop timer for reconfiguration
 151   3                  g_isServoSignalHigh = 0; // Ensure we start with LOW part next if mid-cycle
 152   3                  SERVO_CTRL_PIN = 0;
 153   3                  // Load for LOW duration first, next Timer1 ISR will set it HIGH
 154   3                  TH1 = (unsigned char)(CALCULATE_TIMER_RELOAD_US(SERVO_PWM_PERIOD_US - g_currentServoPulseUs) >
             -> 8);
 155   3                  TL1 = (unsigned char)(CALCULATE_TIMER_RELOAD_US(SERVO_PWM_PERIOD_US - g_currentServoPulseUs) &
             - 0xFF);
 156   3                  TR1 = 1; // Restart Timer1
 157   3              }
 158   2              
 159   2              g_yellowLedState = 0; // Turn Yellow LED ON (Active Low)
 160   2              STATUS_LED_YELLOW_PIN = g_yellowLedState; 
 161   2              g_gateOpenTimerTicks = 0;
 162   2              g_yellowLedBlinkTimerTicks = 0;
 163   2              TR0 = 1; // Start Timer0 for gate timing and LED blinking
 164   2          }
 165   1      }
 166          
 167          // Exit Gate Request (INT1)
 168          void exitGateISR(void) interrupt 2 {
 169   1          if (!g_isGateSequenceActive) {
 170   2              g_isGateSequenceActive = 1;
 171   2              
 172   2              g_currentServoPulseUs = SERVO_PULSE_MAX_US; // Target open position
 173   2              g_servoPwmRunning = 1;
 174   2      
 175   2              if (!TF1) {
 176   3                  TR1 = 0;
C51 COMPILER V9.60.7.0   PROJETO_ATUALIZADO                                                05/26/2025 16:38:08 PAGE 4   

 177   3                  g_isServoSignalHigh = 0;
 178   3                  SERVO_CTRL_PIN = 0;
 179   3                  TH1 = (unsigned char)(CALCULATE_TIMER_RELOAD_US(SERVO_PWM_PERIOD_US - g_currentServoPulseUs) >
             -> 8);
 180   3                  TL1 = (unsigned char)(CALCULATE_TIMER_RELOAD_US(SERVO_PWM_PERIOD_US - g_currentServoPulseUs) &
             - 0xFF);
 181   3                  TR1 = 1;
 182   3              }
 183   2              
 184   2              g_yellowLedState = 0; // Turn Yellow LED ON
 185   2              STATUS_LED_YELLOW_PIN = g_yellowLedState;
 186   2              g_gateOpenTimerTicks = 0;
 187   2              g_yellowLedBlinkTimerTicks = 0;
 188   2              TR0 = 1; // Start Timer0
 189   2          }
 190   1      }
 191          
 192          // Timer0 ISR: System ticks for gate timing and yellow LED blinking
 193          void timer0_SystemTickISR(void) interrupt 1 {
 194   1          // Reload Timer0 for next 50ms interval
 195   1          TH0 = T0_RELOAD_HIGH_BYTE;
 196   1          TL0 = T0_RELOAD_LOW_BYTE;
 197   1      
 198   1          if (g_isGateSequenceActive) {
 199   2              // Yellow LED blinking logic
 200   2              g_yellowLedBlinkTimerTicks++;
 201   2              if (g_yellowLedBlinkTimerTicks >= YELLOW_LED_TOGGLE_TICKS) {
 202   3                  g_yellowLedBlinkTimerTicks = 0;
 203   3                  g_yellowLedState = !g_yellowLedState; // Toggle state
 204   3                  STATUS_LED_YELLOW_PIN = g_yellowLedState;   // Update LED (active low handled by state)
 205   3              }
 206   2      
 207   2              // Gate auto-close logic
 208   2              g_gateOpenTimerTicks++;
 209   2              if (g_gateOpenTimerTicks >= GATE_OPEN_MIN_DURATION_TICKS) {
 210   3                  // Check if vehicle has passed (sensor input is 1 if no vehicle)
 211   3                  if (VEHICLE_DETECT_SENSOR_PIN == 1) { 
 212   4                      g_currentServoPulseUs = SERVO_PULSE_MIN_US; // Target closed position
 213   4                      // Timer1 will automatically adjust to this new pulse width in its ISR
 214   4                      
 215   4                      g_yellowLedState = 1; // Turn Yellow LED OFF
 216   4                      STATUS_LED_YELLOW_PIN = g_yellowLedState;
 217   4                      g_isGateSequenceActive = 0; // End gate sequence
 218   4                      TR0 = 0; // Stop Timer0 as it's no longer needed
 219   4                  }
 220   3                  // If vehicle still present, gate remains open, timer continues
 221   3              }
 222   2          }
 223   1      }
 224          
 225          // Timer1 ISR: Servo PWM generation
 226          void timer1_ServoPwmISR(void) interrupt 3 {
 227   1          if (!g_servoPwmRunning) {
 228   2              TR1 = 0; // Stop Timer1 if PWM is disabled
 229   2              SERVO_CTRL_PIN = 0;
 230   2              g_isServoSignalHigh = 0;
 231   2              return;
 232   2          }
 233   1      
 234   1          if (g_isServoSignalHigh) {
 235   2              // Currently HIGH, transition to LOW
 236   2              SERVO_CTRL_PIN = 0;
C51 COMPILER V9.60.7.0   PROJETO_ATUALIZADO                                                05/26/2025 16:38:08 PAGE 5   

 237   2              g_isServoSignalHigh = 0;
 238   2              // Set timer for the LOW duration of the PWM cycle
 239   2              TH1 = (unsigned char)(CALCULATE_TIMER_RELOAD_US(SERVO_PWM_PERIOD_US - g_currentServoPulseUs) >> 8)
             -;
 240   2              TL1 = (unsigned char)(CALCULATE_TIMER_RELOAD_US(SERVO_PWM_PERIOD_US - g_currentServoPulseUs) & 0xF
             -F);
 241   2          } else {
 242   2              // Currently LOW, transition to HIGH
 243   2              SERVO_CTRL_PIN = 1;
 244   2              g_isServoSignalHigh = 1;
 245   2              // Set timer for the HIGH duration (pulse width)
 246   2              TH1 = (unsigned char)(CALCULATE_TIMER_RELOAD_US(g_currentServoPulseUs) >> 8);
 247   2              TL1 = (unsigned char)(CALCULATE_TIMER_RELOAD_US(g_currentServoPulseUs) & 0xFF);
 248   2          }
 249   1          // TF1 is automatically cleared by hardware when ISR is entered for modes 0, 1, 2
 250   1      }
 251          
 252          /* ===================== MAIN APPLICATION LOOP ===================== */
 253          void main(void) {
 254   1          system_init();                 // Initialize microcontroller hardware and peripherals
 255   1          setupTimer1ForServo();         // Configure and start Timer1 for servo PWM
 256   1      
 257   1          EA = 1; // Enable Global Interrupts
 258   1      
 259   1          while(1) {
 260   2              readParkingBaySensors();           // Check P0 for occupied/free slots
 261   2              updateParkingStatusIndicators();   // Update Green/Red LEDs
 262   2              displaySlotCountOnSevenSegment(g_availableParkingSlots); // Show count on P2
 263   2              // Other non-interrupt driven tasks can be placed here
 264   2              // For this system, most actions are interrupt-driven.
 265   2          }
 266   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    734    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      7    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
